package aigilas.statuses; import aigilas.creatures.ICreature;import aigilas.statuses.impl.BerserkStatus;import aigilas.statuses.impl.BlindStatus;import aigilas.statuses.impl.BlockHealingStatus;import aigilas.statuses.impl.BoilStatus;import aigilas.statuses.impl.BurnOneHitStatus;import aigilas.statuses.impl.BurnStatus;import aigilas.statuses.impl.ConfusionStatus;import aigilas.statuses.impl.DefenseUpStatus;import aigilas.statuses.impl.ElectrifyStatus;import aigilas.statuses.impl.FleeStatus;import aigilas.statuses.impl.HordStatus;import aigilas.statuses.impl.IntDownStatus;import aigilas.statuses.impl.LockSkillCycleStatus;import aigilas.statuses.impl.ManaUpStatus;import aigilas.statuses.impl.MuteStatus;import aigilas.statuses.impl.MutinyStatus;import aigilas.statuses.impl.PoisonOneHitStatus;import aigilas.statuses.impl.PoisonStatus;import aigilas.statuses.impl.PreventDarkUsageStatus;import aigilas.statuses.impl.PreventLightUsageStatus;import aigilas.statuses.impl.PreventMentalUsageStatus;import aigilas.statuses.impl.PreventRegenerationStatus;import aigilas.statuses.impl.RandomBuffStatus;import aigilas.statuses.impl.RegenStatus;import aigilas.statuses.impl.SelfMutilationStatus;import aigilas.statuses.impl.SlowDownStatus;import aigilas.statuses.impl.SoakingWetStatus;import aigilas.statuses.impl.SpeedUpStatus;import aigilas.statuses.impl.StrengthUpStatus;import aigilas.statuses.impl.ToxicStatus;import aigilas.statuses.impl.VenomFistStatus;import aigilas.statuses.impl.WeakKneesStatus;import aigilas.statuses.impl.WeakMusclesStatus;import aigilas.statuses.impl.WeakenStrengthStatus;import aigilas.statuses.impl.ZapStatus;public class StatusFactory {	public static void Apply(ICreature target, int statusId) {		switch (statusId) {		case Status.Confusion:			target.AddStatus(new ConfusionStatus(target));			break;		case Status.Mutiny:			target.AddStatus(new MutinyStatus(target));			break;		case Status.Poison:			target.AddStatus(new PoisonStatus(target));			break;		case Status.Regen:			target.AddStatus(new RegenStatus(target));			break;		case Status.StrengthUp:			target.AddStatus(new StrengthUpStatus(target));			break;		case Status.VenomFist:			target.AddStatus(new VenomFistStatus(target));			break;		case Status.WeakKnees:			target.AddStatus(new WeakKneesStatus(target));			break;		case Status.SpeedUp:			target.AddStatus(new SpeedUpStatus(target));			break;		case Status.ManaUp:			target.AddStatus(new ManaUpStatus(target));			break;		case Status.Electrify:			target.AddStatus(new ElectrifyStatus(target));			break;		case Status.Zap:			target.AddStatus(new ZapStatus(target));			break;		case Status.PoisonOneHit:			target.AddStatus(new PoisonOneHitStatus(target));			break;		case Status.DefenseUp:			target.AddStatus(new DefenseUpStatus(target));			break;		case Status.ColdShoulder:			target.AddStatus(new BurnOneHitStatus(target));			break;		case Status.Burn:			target.AddStatus(new BurnStatus(target));			break;		case Status.Flee:			target.AddStatus(new FleeStatus(target));			break;		case Status.Berserk:			target.AddStatus(new BerserkStatus(target));			break;		case Status.RandomBuff:			target.AddStatus(new RandomBuffStatus(target));			break;		case Status.Hord:			target.AddStatus(new HordStatus(target));			break;		case Status.LockSkillCycle:			target.AddStatus(new LockSkillCycleStatus(target));			break;		case Status.WeakenStrength:			target.AddStatus(new WeakenStrengthStatus(target));			break;		case Status.SelfMutilation:			target.AddStatus(new SelfMutilationStatus(target));			break;		case Status.PreventMentalUsage:			target.AddStatus(new PreventMentalUsageStatus(target));			break;		case Status.PreventRegeneration:			target.AddStatus(new PreventRegenerationStatus(target));			break;		case Status.PreventLightUsage:			target.AddStatus(new PreventLightUsageStatus(target));			break;		case Status.PreventDarkUsage:			target.AddStatus(new PreventDarkUsageStatus(target));			break;		case Status.IntDown:			target.AddStatus(new IntDownStatus(target));			break;		case Status.SoakingWet:			target.AddStatus(new SoakingWetStatus(target));			break;		case Status.HealReflect:			target.AddStatus(new BlockHealingStatus(target));			break;		case Status.Mute:			target.AddStatus(new MuteStatus(target));			break;		case Status.SlowDown:			target.AddStatus(new SlowDownStatus(target));			break;		case Status.WeakMuscles:			target.AddStatus(new WeakMusclesStatus(target));			break;		case Status.Blind:			target.AddStatus(new BlindStatus(target));			break;		case Status.Toxic:			target.AddStatus(new ToxicStatus(target));			break;		case Status.Boil:			target.AddStatus(new BoilStatus(target));			break;		default:			try {				throw new Exception(						String.format(								"An undefined statusId {0} was passed StatusFactory.Apply.",								statusId));			} catch (Exception e) {				e.printStackTrace();			}		}	}}