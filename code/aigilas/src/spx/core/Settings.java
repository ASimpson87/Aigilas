package spx.core;import java.io.BufferedReader;import java.io.DataInputStream;import java.io.FileInputStream;import java.io.InputStreamReader;import java.util.HashMap;public class Settings {	private static final String __configPath = "assets/settings.cfg";	private static Settings __instance;	public static Settings Get() {		if (__instance == null) {			__instance = new Settings();		}		return __instance;	}	private final HashMap<String, String> _values = new HashMap<String, String>();	public int port;	public String serverIp;	public boolean clientVerbose;	public boolean serverVerbose;	public boolean messageContentsVerbose;	public boolean messageHandlerVerbose;	public boolean clientManagerVerbose;	public boolean networkingEnabled;	private Settings() {		try {			FileInputStream fstream = new FileInputStream(__configPath);			DataInputStream in = new DataInputStream(fstream);			BufferedReader br = new BufferedReader(new InputStreamReader(in));			String line;			while ((line = br.readLine()) != null) {				String key = line.split("=")[0];				String value = line.split("=")[1];				_values.put(key, value);				if (key.equals("server_ip"))					serverIp = value;				if (key.equals("socket_port"))					port = Integer.parseInt(value);				if (key.equals("server_log_verbose"))					serverVerbose = IsTrue(value);				if (key.equals("client_log_verbose"))					clientVerbose = IsTrue(value);				if (key.equals("message_contents_log_verbose"))					messageContentsVerbose = IsTrue(value);				if (key.equals("message_handler_log_verbose"))					messageHandlerVerbose = IsTrue(value);				if (key.equals("client_manager_log_verbose"))					clientManagerVerbose = IsTrue(value);				if (key.equals("networking_enabled"))					networkingEnabled = IsTrue(value);			}			in.close();		}		catch (Exception e) {			System.err.println("Error: " + e.getMessage());		}	}	private boolean IsTrue(String value) {		return value.equalsIgnoreCase("true");	}}