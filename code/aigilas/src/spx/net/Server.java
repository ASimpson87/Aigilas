package spx.net;import java.io.IOException;import java.net.InetAddress;import java.net.ServerSocket;import java.net.Socket;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import spx.core.Settings;import spx.devtools.DevConsole;import xna.wrapper.Console;import xna.wrapper.Environment;public class Server extends Thread {	private boolean __otherServerExists;	private static int __listenTimeout = 10000;	private boolean isRunning = true;	private ServerSocket _server;	private HashMap<Integer, HashMap<Integer, Boolean>> _playerStatus = new HashMap<>();	private int _rngSeed = Environment.TickCount();	private Message _message = Message.Empty();	private Integer _turnCount = 0;	private boolean[] _readyCheckIn = { true, true, true, true };	private HashMap<InetAddress, Integer> _addressToIndexMap = new HashMap<>();	private List<Socket> _connections;	private Communicator _comm;	public Server() {		try {			_server = new ServerSocket(Settings.Get().GetPort());			_server.setSoTimeout(__listenTimeout);			for (int ii = 0; ii < Message.PlayerMax; ii++) {				_playerStatus.put(ii, new HashMap<Integer, Boolean>());				for (int jj = 0; jj < Message.CommandMax; jj++) {					_playerStatus.get(ii).put(jj, false);				}			}			_connections = new ArrayList<Socket>();			__otherServerExists = false;			Console.WriteLine("Spinning up a server instance");		}		catch (Exception hide) {			__otherServerExists = true;			Console.WriteLine("SERVER: Failure to start. If this isn't the host machine, then this message is harmless.");			DevConsole.Get().Add("SERVER: Failure to start. If this isn't the host machine, then this message is harmless.");		}	}	public void run() {		while (isRunning) {			pollForNewMessages();			broadCastGameState();		}	}	private void pollForNewMessages() {		Socket client = null;		try {			client = _server.accept();		}		catch (IOException e) {			e.printStackTrace();		}		if (client != null) {			_comm = new Communicator(client);			_message = _comm.receive();			System.out.println("SERVER: Message received: " + _message.MessageType);			switch (_message.MessageType) {				case CONNECT:					Console.WriteLine("SERVER: New client connection");					InitPlayer(_connections.size(), 0);					SendMessage(Message.CreateInit(_connections.size(), _rngSeed));					_addressToIndexMap.put(client.getLocalAddress(), _connections.size());					_connections.add(client);					if (Settings.Get().GetServerVerbose())						Console.WriteLine("SERVER: Accepted new connection");					_turnCount = 0;				case CHECK_STATE:					InitPlayer(_message.PlayerIndex, _message.Command);					_message.IsActive = _playerStatus.get((int) _message.PlayerIndex).get((int) _message.Command);					if (Settings.Get().GetServerVerbose())						Console.WriteLine("SERVER: Check extends  CMD({1}) PI({0}) AC({2})", _message.PlayerIndex, _message.Command, _playerStatus.get((int) _message.PlayerIndex).get((int) _message.Command));					SendMessage(_message);					break;				case MOVEMENT:					InitPlayer(_message.PlayerIndex, _message.Command);					_playerStatus.get(_message.PlayerIndex).put((int) _message.Command, _message.IsActive);					if (Settings.Get().GetServerVerbose())						Console.WriteLine("SERVER: Moves extends  CMD({1}) PI({0}) AC({2})", _message.PlayerIndex, _message.Command, _message.IsActive);					break;				case START_GAME:					Console.WriteLine("SERVER: Announcing game commencement.");					Announce(_message);					break;				case PLAYER_COUNT:					if (Settings.Get().GetServerVerbose())						Console.WriteLine("SERVER: PLAYER COUNT");					SendMessage(Message.CreatePlayerCount(_connections.size()));					break;				case READY_FOR_NEXT_TURN:					if (Settings.Get().GetServerVerbose())						Console.WriteLine("SERVER: Received ready signal from client");					_readyCheckIn[_addressToIndexMap.get(client.getLocalAddress())] = true;					break;				case HEART_BEAT:					_readyCheckIn[_addressToIndexMap.get(client.getLocalAddress())] = true;					break;				default:					if (Settings.Get().GetServerVerbose())						Console.WriteLine("SERVER: Unknown message");					break;			}		}		else {			if (Settings.Get().GetServerVerbose())				Console.WriteLine("SERVER: Client wasn't valid");		}	}	private void InitPlayer(int playerIndex, int command) {		if (!_playerStatus.containsKey(playerIndex)) {			_playerStatus.put(playerIndex, new HashMap<Integer, Boolean>());		}		if (!_playerStatus.get(playerIndex).containsKey(command)) {			_playerStatus.get(playerIndex).put(command, false);		}	}	public boolean IsOnlyInstance() {		return !__otherServerExists;	}	private void broadCastGameState() {		int readyCount = 0;		for (int ii = 0; ii < _readyCheckIn.length; ii++) {			readyCount += _readyCheckIn[ii] ? 1 : 0;		}		if (readyCount >= _connections.size()) {			if (Settings.Get().GetServerVerbose())				Console.WriteLine("SERVER: Announcing player input status.");			Announce(Message.CreatePlayerState(_playerStatus, _turnCount++));			for (int ii = 0; ii < _readyCheckIn.length; ii++) {				_readyCheckIn[ii] = false;			}		}	}	private void Announce(Message contents) {		for (Socket client : _connections) {			_comm = new Communicator(client);			SendMessage(contents);		}	}	private void SendMessage(Message contents) {		_comm.send(contents);	}	public void Close() {		isRunning = false;		System.out.println("SERVER: Shutting down");	}}