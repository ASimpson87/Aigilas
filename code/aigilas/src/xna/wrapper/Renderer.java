package xna.wrapper;import spx.core.Point2;import spx.core.XnaManager;import com.badlogic.gdx.Gdx;import com.badlogic.gdx.Graphics;import com.badlogic.gdx.graphics.Color;import com.badlogic.gdx.graphics.GL10;import com.badlogic.gdx.graphics.OrthographicCamera;import com.badlogic.gdx.graphics.Texture;import com.badlogic.gdx.graphics.g2d.Sprite;import com.badlogic.gdx.graphics.g2d.SpriteBatch;public class Renderer {	private SpriteBatch batch;	private OrthographicCamera camera;	private static final Color __defaultFilter = Color.WHITE;	private static final float __defaultDepth = 1f;	private static final float __defaultAlpha = 1f;	public Renderer() {		camera = new com.badlogic.gdx.graphics.OrthographicCamera();		camera.setToOrtho(false, XnaManager.WindowWidth, XnaManager.WindowHeight);		Graphics g = Gdx.graphics;		int x = Gdx.graphics.getWidth();		int y = Gdx.graphics.getHeight();		batch = new com.badlogic.gdx.graphics.g2d.SpriteBatch();	}	public void Draw(Texture image, Point2 location, float depth, Color filter) {		Render(image, location, filter, depth, __defaultAlpha);	}	public void Draw(Texture image, Point2 location, float depth, float alpha) {		Render(image, location, __defaultFilter, depth, alpha);	}	public void Draw(Texture image, Point2 location, float depth) {		Render(image, location, __defaultFilter, depth, __defaultAlpha);	}	public void Draw(Texture image, Point2 location) {		Render(image, location, __defaultFilter, __defaultDepth, __defaultAlpha);	}	private void Render(Texture image, Point2 location, Color filter, float depth, float alpha) {		batch.setColor(filter);		batch.draw(image, location.PosX, location.PosY);		batch.setColor(0, 0, 0, 1);	}	public void DrawString(String content, Point2 location, Color filter, float scale, float depth) {		RenderString(content, location, filter, scale, depth);	}	private void RenderString(String content, Point2 location, Color filter, float scale, float depth) {	}	public void Begin() {		Gdx.gl.glClearColor(0, 0, 0.2f, 1);		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);		camera.update();		batch.setProjectionMatrix(camera.combined);		batch.begin();	}	public void End() {		batch.end();	}	public void Draw(Sprite _texture, Point2 _position, float _layerDepth, Color _color) {		_texture.setPosition(_position.PosX, _position.PosY);		_texture.setColor(_color);		_texture.draw(batch);	}	public void Draw(Texture texture, Point2 position, float depth, Color filter, int scaleX, int scaleY) {		batch.draw(texture, position.PosX, position.PosY, 0, 0, scaleX, scaleY);	}}