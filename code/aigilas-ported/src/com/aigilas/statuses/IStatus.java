package com.aigilas.statuses;import com.xna.wrapper.*;import java.util.*;import com.aigilas.creatures.*;     public class IStatus    {        protected List<CreatureAction> _prevents = new ArrayList<CreatureAction>();        protected boolean _wasPassed = false;        protected int _strength = 0;        protected int _maxStrength = 100;                protected boolean _isActive = true;        protected ICreature _target;        protected StatBuff _buff = null;        protected boolean _buffMax = false;        protected List<Integer> _blockedElements = new ArrayList<Integer>();        protected HashMap<StatusComponent,List<Integer>> _passables = new HashMap<StatusComponent,List<Integer>>();        protected IStatus(ICreature target)        {            _strength = _maxStrength;            _target = target;            Setup();        }        public boolean IsActive(){return _isActive;}        public boolean Prevents(CreatureAction action)        {        	for(CreatureAction prevent:_prevents){        		if(prevent == action){        			return true;        		}        	}            return false;        }        public boolean IsElementBlocked(int element)        {        	for(int blocked:_blockedElements){        		if(blocked == element){        			return true;        		}        	}            return false;        }        public void PassOn(ICreature target,StatusComponent componentType)        {            if (_passables.containsKey(componentType))            {                for (Integer contagion:_passables.get(componentType))                {                    StatusFactory.Apply(target, contagion);                }                _wasPassed = _passables.containsKey(componentType);            }                   }        protected void Add(int statusId, StatusComponent componentType)        {            if(!_passables.containsKey(componentType))            {                _passables.put(componentType,new ArrayList<Integer>());            }            _passables.get(componentType).add(statusId);        }        public void Update()        {            if (_isActive)            {                _strength--;                if (_strength <= 0)                {                    Cleanup();                    _isActive = false;                }            }        }        public void Act()        {        }        private void CycleBuff()        {            if (_buff != null)            {                _target.AddBuff(_buff,_buffMax);            }        }        public void Setup()         {            CycleBuff();        }        public void Cleanup()         {            CycleBuff();        }    }