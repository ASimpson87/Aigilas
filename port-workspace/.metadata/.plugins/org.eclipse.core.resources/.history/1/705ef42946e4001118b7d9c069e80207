package com.spx.paths;import com.spx.wrapper.*;import com.spx.wrapper.Color;import java.util.*;import com.spx.core.*;

    public class Path
    {
        public Point2 Finish = new Point2(0, 0);
        private List<Point2> _steps = new ArrayList<Point2>();
        private HashMap<Point2,Point2> _stepLookup = new HashMap<Point2,Point2>();
        private float _totalWeight = 0;

        public Path(){}

        public Path Reset(Point2 start, Point2 finish)
        {
            _steps.Clear();
            _stepLookup.Clear();
            _totalWeight = 0;
            moveIndex = -1;
            Finish.Copy(finish);
            Add(start);
            return this;
        }

        public Path Copy(Path source)
        {
            if (source != null)
            {
                _stepLookup = StepLookup.Copy(source._stepLookup);
                _steps = Walk.Copy(source._steps);
                _totalWeight = source._totalWeight;
                Finish.Copy(source.Finish);
            }
            moveIndex = -1;
            return this;
        }

        public boolean Add(Point2 step)
        {
            if(!_stepLookup.ContainsKey(step))
            {
                _stepLookup.Add(step, step);
                _steps.Add(step);
                _totalWeight += step.Weight;
                return true;
            }
            return false;
        }
        public float GetCost()
        {
            return _totalWeight;
        }

        private int moveIndex = -1;
        public boolean HasMoves()
        {
            return moveIndex < _steps.length;
        }
        public Point2 GetNextMove()
        {
            moveIndex++;
            if (moveIndex >= _steps.length)
            {
                return null;
            }
            if (_steps.length == 0)
            {
                return null;
            }
            return _steps.Count == 1 ? _steps[0]  extends  _steps[moveIndex];
        }

        public boolean IsDone()
        {
            return _stepLookup.ContainsKey(Finish);
        }
        public Point2 GetLastStep()
        {
            return _steps[_steps.Count - 1];
        }

        public List<Point2> GetNeighbors()
        {
           return GetLastStep().GetNeighbors();
        }

        public int Length()
        {
            return _steps.Count;
        }
    }
