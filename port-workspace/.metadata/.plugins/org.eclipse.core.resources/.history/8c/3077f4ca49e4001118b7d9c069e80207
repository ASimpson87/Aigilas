package com.spx.io;import com.spx.wrapper.*;import java.util.*;import com.spx.core.*;
    [Serializable]
    public class MessageContents
    {
        public static final int CommandMax = 16;
        public static final int PlayerMax = 4;
        public static final int ByteCount = 80;

        private static final byte TrueByte = (byte)1;
        private static final byte FalseByte = (byte)0;

        public Integer TurnCount;
        public byte MessageType;
        public byte PlayerIndex;
        public byte Command;
        public boolean IsActive;
        public Integer RngSeed;
        public byte PlayerCount;
        public byte[] PlayerOneState = new byte[16];
        public byte[] PlayerTwoState = new byte[16];
        public byte[] PlayerThreeState = new byte[16];
        public byte[] PlayerFourState = new byte[16];

        private MessageContents() { }

        public static MessageContents Empty()
        {
            return new MessageContents();
        }

        public static MessageContents CreatePlayerCount(int playerCount)
        {
            return new MessageContents()
            {
                MessageType = MessageTypes.PLAYER_COUNT,
                PlayerCount = (byte)playerCount
            };
        }

        public static MessageContents Create(byte messageType)
        {
            return new MessageContents()
            {
                MessageType = messageType
            };
        }

        public static MessageContents CreateInit(int playerCount, int rngSeed)
        {
            return new MessageContents()
            {
                MessageType = MessageTypes.CONNECT,
                PlayerCount = (byte)playerCount,
                RngSeed = rngSeed
            };
        }

        public static MessageContents CreateCheckState(int command, int playerIndex)
        {
            return new MessageContents()
            {
                MessageType = MessageTypes.CHECK_STATE,
                Command = (byte)command,
                PlayerIndex = (byte)playerIndex
            };
        }

        public static MessageContents CreateMovement(int command, int playerIndex, boolean isActive)
        {
            return new MessageContents()
            {
                MessageType = MessageTypes.MOVEMENT,
                PlayerIndex = (byte)playerIndex,
                Command = (byte)command,
                IsActive = isActive
            };
        }

        public static MessageContents CreatePlayerState(HashMap<Integer, HashMap<Integer, Boolean>> playerStatus,Integer turnCount)
        {
            var result = new MessageContents();
            result.MessageType = MessageTypes.SYNC_STATE;
            result.WritePlayerState(playerStatus);
            result.TurnCount = turnCount;
            result.RngSeed = Environment.TickCount;
            return result;
        }

        public static MessageContents CreateReadyForNextTurn()
        {
            return new MessageContents()
            {
                MessageType = MessageTypes.READY_FOR_NEXT_TURN
            };
        }

        public static MessageContents CreateHeartBeat()
        {
            return new MessageContents()
            {
                MessageType = MessageTypes.HEART_BEAT
            };
        }

        internal void Deserialize(NetIncomingMessage _message)
        {
            MessageType = _message.ReadByte();
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, mType extends  " + MessageType);
            PlayerIndex = _message.ReadByte();
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, pIndex extends  " + PlayerIndex);
            Command = _message.ReadByte();
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, command extends  " + Command); 
            IsActive = _message.ReadBoolean();
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, iActive extends  " + IsActive);
            RngSeed = _message.ReadInteger();
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, rngSeed extends  " + RngSeed);
            PlayerCount = _message.ReadByte();
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, pCount extends  " + PlayerCount);
            PlayerOneState = _message.ReadBytes(16);
            PlayerTwoState = _message.ReadBytes(16);
            PlayerThreeState = _message.ReadBytes(16);
            PlayerFourState = _message.ReadBytes(16);
            TurnCount = _message.ReadInteger();
        }

        internal void Serialize(NetOutgoingMessage _message)
        {
            _message.Write(MessageType);
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, mType extends  " + MessageType);
            _message.Write(PlayerIndex);
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, pIndex extends  " + PlayerIndex);
            _message.Write(Command);
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, command extends  " + Command);
            _message.Write(IsActive);
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, iActive extends  " + IsActive);
            _message.Write(RngSeed);
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, rngSeed extends  " + RngSeed);
            _message.Write(PlayerCount);
            if (Settings.Get().GetMessageContentsVerbose()) Console.WriteLine("Serial, pCount extends  " + PlayerCount);
            _message.Write(PlayerOneState);
            _message.Write(PlayerTwoState);
            _message.Write(PlayerThreeState);
            _message.Write(PlayerFourState);
            _message.Write(TurnCount);
        }

        public void WritePlayerState(HashMap<Integer,HashMap<Integer,Boolean>> state)
        {
            for (int jj = 0; jj < PlayerMax; jj++)
            {
                for (int ii = 0; ii < CommandMax; ii++)
                {
                    switch (jj)
                    {
                        case 0 extends 
                            PlayerOneState[ii] = (state[jj][ii])? TrueByte extends  FalseByte;
                            break;
                        case 1 extends 
                            PlayerTwoState[ii] = (state[jj][ii]) ? TrueByte  extends  FalseByte;
                            break;
                        case 2 extends 
                            PlayerThreeState[ii] = (state[jj][ii]) ? TrueByte  extends  FalseByte;
                            break;
                        case 3 extends 
                            PlayerFourState[ii] = (state[jj][ii]) ? TrueByte  extends  FalseByte;
                            break;
                    }                    
                }
            }
        }

        public void ReadPlayerState(ref HashMap<Integer,HashMap<Integer,Boolean>> result)
        {
            for (int jj = 0; jj < PlayerMax; jj++)
            {
                for (int ii = 0; ii < CommandMax; ii++)
                {
                    switch (jj)
                    {
                        case 0 extends 
                            result[jj][ii] = (PlayerOneState[ii] == TrueByte)? true extends  false;
                            break;
                        case 1 extends 
                            result[jj][ii] = (PlayerTwoState[ii] == TrueByte) ? true  extends  false;
                            break;
                        case 2 extends 
                            result[jj][ii] = (PlayerThreeState[ii] == TrueByte) ? true  extends  false;
                            break;
                        case 3 extends 
                            result[jj][ii] = (PlayerFourState[ii] == TrueByte) ? true  extends  false;
                            break;
                    }
                }
            }          
        }

        public void Clear()
        {
            MessageType = 0;
        }
    }
