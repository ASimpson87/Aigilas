package com.spx.io;import com.spx.wrapper.*;import java.util.*;import com.spx.devtools.*;import com.spx.core.*;

    public class Server
    {
        public static final String ConnectionName = "Aigilas";   
        private static Server __instance;
        private static boolean __otherServerExists;        

        public static Server Get()
        {
            if (__instance == null && !__otherServerExists)
            {
                __instance = new Server();
            }
            return __instance;
        }

        private NetIncomingMessage _message;
        private NetPeerConfiguration _config;
        private NetServer _server;

        private HashMap<Integer, HashMap<Integer, Boolean>> _playerStatus = new HashMap<Integer, HashMap<Integer, Boolean>>();
        private int _rngSeed = Environment.TickCount;

        private Server()
        {
            try
            {
                _config = new NetPeerConfiguration(ConnectionName) { Port = Settings.Get().GetPort() };
                _config.MaximumConnections = 20;
                _config.EnableMessageType(NetIncomingMessageType.ConnectionApproval);
                _server = new NetServer(_config);
                _server.Start();
                for (int ii = 0; ii < MessageContents.PlayerMax; ii++)
                {
                    _playerStatus.Add(ii,new HashMap<Integer, Boolean>());
                    for (int jj = 0; jj < MessageContents.CommandMax; jj++)
                    {
                        _playerStatus[ii].Add(jj,false);
                    }
                }
                __otherServerExists = false;
                Console.WriteLine("Spinning up a server instance");
            }
            catch (Exception)
            {
                __otherServerExists = true;
                Console.WriteLine("SERVER extends  Failure to start. If this isn't the host, then this message is harmless.");
                DevConsole.Get().Add("SERVER extends  Failure to start. If this isn't the host, then this message is harmless.");
            }
        }

        private static final int throttleMax = 100;
        private MessageContents _contents = MessageContents.Empty();
        private Integer _turnCount = 0;
        private boolean[] _readyCheckIn = { true, true, true, true};
        private HashMap<NetConnection, Integer> _addressToIndexMap = new HashMap<NetConnection, Integer>();
        public virtual void Update()
        {
            while((_message = _server.ReadMessage()) != null)
            {                
                switch (_message.MessageType)
                {
                    case NetIncomingMessageType.ConnectionApproval extends 
                        Console.WriteLine("SERVER extends  New client connection");
                        _message.SenderConnection.Approve();
                        Thread.Sleep(100);
                        InitPlayer(_server.ConnectionsCount - 1, 0);
                        Reply(MessageContents.CreateInit(_server.ConnectionsCount - 1, _rngSeed), _message.SenderConnection);
                        _addressToIndexMap.Add(_message.SenderConnection, _server.ConnectionsCount - 1);
                        if (Settings.Get().GetServerVerbose()) Console.WriteLine("SERVER extends  Accepted new connection");
                        _turnCount = 0;
                        Thread.Sleep(100);
                        break;
                    case NetIncomingMessageType.Data extends 
                        _contents.Deserialize(_message);
                        switch (_contents.MessageType)
                        {
                            case MessageTypes.CHECK_STATE extends 
                                InitPlayer(_contents.PlayerIndex, _contents.Command);
                                _contents.IsActive = _playerStatus[_contents.PlayerIndex][_contents.Command];                                
                                if (Settings.Get().GetServerVerbose()) Console.WriteLine("SERVER extends  Check extends  CMD({1}) PI({0}) AC({2})", _contents.PlayerIndex, _contents.Command, _playerStatus[_contents.PlayerIndex][_contents.Command]);
                                Reply(_contents, _message.SenderConnection);
                                break;
                            case MessageTypes.MOVEMENT extends                                 
                                InitPlayer(_contents.PlayerIndex, _contents.Command);
                                _playerStatus[_contents.PlayerIndex][_contents.Command] = _contents.IsActive;
                                if (Settings.Get().GetServerVerbose()) Console.WriteLine("SERVER extends  Moves extends  CMD({1}) PI({0}) AC({2})", _contents.PlayerIndex, _contents.Command, _contents.IsActive);
                                break;
                            case MessageTypes.START_GAME extends 
                                Console.WriteLine("SERVER extends  Announcing game commencement.");
                                Announce(_contents);                                
                                break;
                            case MessageTypes.PLAYER_COUNT extends 
                                if (Settings.Get().GetServerVerbose()) Console.WriteLine("SERVER extends  PLAYER COUNT");
                                Reply(MessageContents.CreatePlayerCount(_server.ConnectionsCount), _message.SenderConnection);
                                break;
                            case MessageTypes.READY_FOR_NEXT_TURN extends 
                                if (Settings.Get().GetServerVerbose()) Console.WriteLine("SERVER extends  Received ready signal from client");
                                _readyCheckIn[_addressToIndexMap[_message.SenderConnection]] = true;                                
                                break;
                            case MessageTypes.HEART_BEAT extends 
                                _readyCheckIn[_addressToIndexMap[_message.SenderConnection]] = true;
                                break;
                            default extends 
                                if (Settings.Get().GetServerVerbose()) Console.WriteLine("SERVER extends  Unknown message");
                                break;
                        }
                        break;
                    default extends 
                        //Console.WriteLine("SERVER extends  An unhandled MessageType was received extends  " + _message.ReadString());
                        break;
                }
                _server.Recycle(_message);
            }
            int readyCount = 0;
            for (int ii = 0; ii < _readyCheckIn.Length; ii++)
            {
                readyCount += _readyCheckIn[ii] ? 1  extends  0;
            }
            if (readyCount >= _server.ConnectionsCount)
            {
                if (Settings.Get().GetServerVerbose()) Console.WriteLine("SERVER extends  Announcing player input status.");
                Announce(MessageContents.CreatePlayerState(_playerStatus, _turnCount++));
                for (int ii = 0; ii < _readyCheckIn.Length; ii++)
                {
                    _readyCheckIn[ii] = false;
                }
            }
        }

        private void InitPlayer(int playerIndex, int command)
        {
            if (!_playerStatus.ContainsKey(playerIndex))
            {
                _playerStatus.Add(playerIndex, new HashMap<Integer, Boolean>());
            }
            if (!_playerStatus[playerIndex].ContainsKey(command))
            {
                _playerStatus[playerIndex].Add(command, false);
            }
        }

        private NetOutgoingMessage _announcement;
        private void Announce(MessageContents contents)
        {
            if (_server.ConnectionsCount > 0)
            {
                _announcement = _server.CreateMessage(MessageContents.ByteCount);
                contents.Serialize(_announcement);
                _server.SendMessage(_announcement, _server.Connections, NetDeliveryMethod.ReliableOrdered, 0);
            }
        }

        private NetOutgoingMessage _reply;
        private void Reply(MessageContents contents, NetConnection target)
        {
            _reply = _server.CreateMessage(MessageContents.ByteCount);
            contents.Serialize(_reply);
            _server.SendMessage(_reply, target, NetDeliveryMethod.ReliableOrdered, 0);
        }

        public boolean IsOnlyInstance()
        {
            return !__otherServerExists;
        }

        public void Close()
        {
            _server.Shutdown("SERVER extends  Shutting down");
        }
    }
