package com.aigilas.skills;import com.spx.wrapper.*;import java.util.*;import ï»¿com.aigilas.creatures.*;import com.aigilas.entities.*;import com.spx.core.*;import com.spx.entities.*;
    public class SkillBehavior
    {
        protected SideEffects _sideEffects;
        protected ISkill _parent;
        protected boolean _used = false;
        protected Stats _cost;

        public SkillBehavior(int effectGraphic, int animation,ISkill parentSkill)
        {
            _parent = parentSkill;
            _sideEffects = new SideEffects(effectGraphic, animation,_parent);
            _cost = new Stats(0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        public int GetSpriteType() { return _sideEffects.GetSpriteType(); }
        public virtual void Activate(ICreature target)         public virtual void Cleanup(Entity target, SkillEffect source)         public boolean IsActive()
        {
            return !_used;
        }
        public SkillEffect GetGraphic()
        {
            return _sideEffects.GetFirstGraphic();
        }
        public void AddCost(String stat, float cost)
        {
            _cost.AddBuff(new StatBuff(stat, cost));
        }
        protected boolean SubtractCost(ICreature owner)
        {
            boolean costPaid = false;
            foreach (String stat in StatType.Values)
            {
                if (stat != StatType.REGEN)
                {
                    if (owner.LowerStat(stat, _cost.Get(stat)))
                    {
                        costPaid = true;
                    }
                }
            }
            return costPaid;
        }
        private IEntity hitTarget;
        private ICreature hitCreature;
        public virtual boolean AffectTarget(ICreature source,SkillEffect graphic)
        {
            hitTarget = source.GetTargets().GetCollidedTarget(graphic);
            if (null != hitTarget && hitTarget!=source)
            {
                _parent.Affect(hitTarget);
                hitCreature = hitTarget.IsCreature();
                if (hitCreature != null)
                {
                    hitCreature.Combo(_parent.GetElements());
                    hitCreature.React(_parent.GetSkillId());
                }
                if (!_parent.IsPersistent())
                {
                    return false;
                }
            }            
            return true;
        }
        public int GetAnimationType()
        {
            return _sideEffects.GetAnimationType();
        }

        public float GetCost()
        {
            return _cost.Get(StatType.MANA);
        }
    }
    public class RangedBehavior extends  SkillBehavior
    {
        public RangedBehavior(int effectGraphic, ISkill parentSkill)         public override void Activate(ICreature target)     }
    public class SelfBehavior extends SkillBehavior
{ super(effectGraphic, AnimationType.RANGED, parentSkill) { };        public SelfBehavior(int effectGraphic, ISkill parentSkill)         public override void Activate(ICreature target)         public override boolean AffectTarget(ICreature source, SkillEffect graphic)
{ super(effectGraphic, AnimationType.SELF, parentSkill) { };            if (!_used)
            {                
                source.React(_parent.GetSkillId());
                _parent.Affect(source);
                _used = true;
            }
            return true;
        }
    }
    public class StationaryBehavior  extends  SkillBehavior
    {
        public StationaryBehavior(int effectGraphic, ISkill parentSkill)         public override void Activate(ICreature target) 
{ super(effectGraphic, AnimationType.STATIONARY, parentSkill) { };            if(SubtractCost(target))
            {
                if (_parent.StartOffCenter)
                {
                    var location = new Point2(target.GetLocation().GridX + target.GetSkillVector().GridX, target.GetLocation().GridY + target.GetSkillVector().GridY);
                    _sideEffects.Generate(location, new Point2(0,0), target);
                }
                else
                {
                    _sideEffects.Generate(target.GetLocation(), new Point2(0,0), target);
                }
            }
        }
    }
    public class CloudBehavior extends SkillBehavior
    {
        public CloudBehavior(int effectGraphic, ISkill parentSkill)         public override void Activate(ICreature target)
{ super(effectGraphic, AnimationType.CLOUD, parentSkill) { };            if (SubtractCost(target))
            {
                var referencePoint = target.GetLocation();
                for (var ii = -1; ii < 2; ii++)
                {
                    for (var jj = -1; jj < 2; jj++)
                    {
                        if (ii != 0 || jj != 0)
                        {
                            var cloudPosition = new Point2(referencePoint.GridX + ii, referencePoint.GridY + jj);
                            _sideEffects.Generate(cloudPosition, new Point2(0, 0), target);
                        }
                    }
                }
            }
        }
    }
    public class RotateBehavior  extends  SkillBehavior
    {
        public RotateBehavior(int effectGraphic, ISkill parentSkill)         public override void Activate(ICreature target)
{ super(effectGraphic, AnimationType.ROTATE, parentSkill) { };            _sideEffects.Generate(target.GetLocation(), new Point2(0, 0), target);
        }
    }
